// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sync_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace adonai {
namespace wallet {
namespace sync {

namespace {

const ::google::protobuf::Descriptor* SyncRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncRequest_SyncType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SyncResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncResponse_SyncAck_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_sync_5fprotocol_2eproto() {
  protobuf_AddDesc_sync_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sync_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  SyncRequest_descriptor_ = file->message_type(0);
  static const int SyncRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, synctype_),
  };
  SyncRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRequest_descriptor_,
      SyncRequest::default_instance_,
      SyncRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRequest));
  SyncRequest_SyncType_descriptor_ = SyncRequest_descriptor_->enum_type(0);
  SyncResponse_descriptor_ = file->message_type(1);
  static const int SyncResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, syncack_),
  };
  SyncResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncResponse_descriptor_,
      SyncResponse::default_instance_,
      SyncResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncResponse));
  SyncResponse_SyncAck_descriptor_ = SyncResponse_descriptor_->enum_type(0);
  AccountRequest_descriptor_ = file->message_type(2);
  static const int AccountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, knownid_),
  };
  AccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountRequest_descriptor_,
      AccountRequest::default_instance_,
      AccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountRequest));
  AccountResponse_descriptor_ = file->message_type(3);
  static const int AccountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, deletedid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, account_),
  };
  AccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountResponse_descriptor_,
      AccountResponse::default_instance_,
      AccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountResponse));
  AccountAck_descriptor_ = file->message_type(4);
  static const int AccountAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAck, deletedguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAck, writtenguid_),
  };
  AccountAck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountAck_descriptor_,
      AccountAck::default_instance_,
      AccountAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountAck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountAck));
  Account_descriptor_ = file->message_type(5);
  static const int Account_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, color_),
  };
  Account_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_descriptor_,
      Account::default_instance_,
      Account_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sync_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRequest_descriptor_, &SyncRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncResponse_descriptor_, &SyncResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountRequest_descriptor_, &AccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountResponse_descriptor_, &AccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountAck_descriptor_, &AccountAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_descriptor_, &Account::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sync_5fprotocol_2eproto() {
  delete SyncRequest::default_instance_;
  delete SyncRequest_reflection_;
  delete SyncResponse::default_instance_;
  delete SyncResponse_reflection_;
  delete AccountRequest::default_instance_;
  delete AccountRequest_reflection_;
  delete AccountResponse::default_instance_;
  delete AccountResponse_reflection_;
  delete AccountAck::default_instance_;
  delete AccountAck_reflection_;
  delete Account::default_instance_;
  delete Account_reflection_;
}

void protobuf_AddDesc_sync_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sync_protocol.proto\022\026com.adonai.wallet"
    ".sync\"\234\001\n\013SyncRequest\022\017\n\007account\030\001 \002(\t\022\020"
    "\n\010password\030\002 \002(\t\022E\n\010syncType\030\003 \001(\0162,.com"
    ".adonai.wallet.sync.SyncRequest.SyncType"
    ":\005MERGE\"#\n\010SyncType\022\014\n\010REGISTER\020\000\022\t\n\005MER"
    "GE\020\001\"\233\001\n\014SyncResponse\022=\n\007syncAck\030\001 \002(\0162,"
    ".com.adonai.wallet.sync.SyncResponse.Syn"
    "cAck\"L\n\007SyncAck\022\007\n\002OK\020\310\001\022\023\n\016ACCOUNT_EXIS"
    "TS\020\222\003\022\017\n\nAUTH_WRONG\020\223\003\022\022\n\rUNKNOWN_ERROR\020"
    "\347\007\"!\n\016AccountRequest\022\017\n\007knownID\030\001 \003(\003\"V\n"
    "\017AccountResponse\022\021\n\tdeletedID\030\001 \003(\003\0220\n\007a"
    "ccount\030\002 \003(\0132\037.com.adonai.wallet.sync.Ac"
    "count\"6\n\nAccountAck\022\023\n\013deletedGuid\030\001 \003(\003"
    "\022\023\n\013writtenGuid\030\002 \003(\003\"i\n\007Account\022\n\n\002ID\030\001"
    " \002(\004\022\014\n\004name\030\002 \002(\t\022\023\n\013description\030\003 \001(\t\022"
    "\020\n\010currency\030\004 \002(\t\022\016\n\006amount\030\005 \002(\t\022\r\n\005col"
    "or\030\006 \001(\r", 648);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sync_protocol.proto", &protobuf_RegisterTypes);
  SyncRequest::default_instance_ = new SyncRequest();
  SyncResponse::default_instance_ = new SyncResponse();
  AccountRequest::default_instance_ = new AccountRequest();
  AccountResponse::default_instance_ = new AccountResponse();
  AccountAck::default_instance_ = new AccountAck();
  Account::default_instance_ = new Account();
  SyncRequest::default_instance_->InitAsDefaultInstance();
  SyncResponse::default_instance_->InitAsDefaultInstance();
  AccountRequest::default_instance_->InitAsDefaultInstance();
  AccountResponse::default_instance_->InitAsDefaultInstance();
  AccountAck::default_instance_->InitAsDefaultInstance();
  Account::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sync_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sync_5fprotocol_2eproto {
  StaticDescriptorInitializer_sync_5fprotocol_2eproto() {
    protobuf_AddDesc_sync_5fprotocol_2eproto();
  }
} static_descriptor_initializer_sync_5fprotocol_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* SyncRequest_SyncType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRequest_SyncType_descriptor_;
}
bool SyncRequest_SyncType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SyncRequest_SyncType SyncRequest::REGISTER;
const SyncRequest_SyncType SyncRequest::MERGE;
const SyncRequest_SyncType SyncRequest::SyncType_MIN;
const SyncRequest_SyncType SyncRequest::SyncType_MAX;
const int SyncRequest::SyncType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SyncRequest::kAccountFieldNumber;
const int SyncRequest::kPasswordFieldNumber;
const int SyncRequest::kSyncTypeFieldNumber;
#endif  // !_MSC_VER

SyncRequest::SyncRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncRequest::InitAsDefaultInstance() {
}

SyncRequest::SyncRequest(const SyncRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncRequest::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  synctype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRequest::~SyncRequest() {
  SharedDtor();
}

void SyncRequest::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRequest_descriptor_;
}

const SyncRequest& SyncRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sync_5fprotocol_2eproto();
  return *default_instance_;
}

SyncRequest* SyncRequest::default_instance_ = NULL;

SyncRequest* SyncRequest::New() const {
  return new SyncRequest;
}

void SyncRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    synctype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_syncType;
        break;
      }

      // optional .com.adonai.wallet.sync.SyncRequest.SyncType syncType = 3 [default = MERGE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_syncType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::adonai::wallet::sync::SyncRequest_SyncType_IsValid(value)) {
            set_synctype(static_cast< ::com::adonai::wallet::sync::SyncRequest_SyncType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional .com.adonai.wallet.sync.SyncRequest.SyncType syncType = 3 [default = MERGE];
  if (has_synctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->synctype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional .com.adonai.wallet.sync.SyncRequest.SyncType syncType = 3 [default = MERGE];
  if (has_synctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->synctype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional .com.adonai.wallet.sync.SyncRequest.SyncType syncType = 3 [default = MERGE];
    if (has_synctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->synctype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRequest::MergeFrom(const SyncRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_synctype()) {
      set_synctype(from.synctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRequest::CopyFrom(const SyncRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SyncRequest::Swap(SyncRequest* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(synctype_, other->synctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRequest_descriptor_;
  metadata.reflection = SyncRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SyncResponse_SyncAck_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncResponse_SyncAck_descriptor_;
}
bool SyncResponse_SyncAck_IsValid(int value) {
  switch(value) {
    case 200:
    case 402:
    case 403:
    case 999:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SyncResponse_SyncAck SyncResponse::OK;
const SyncResponse_SyncAck SyncResponse::ACCOUNT_EXISTS;
const SyncResponse_SyncAck SyncResponse::AUTH_WRONG;
const SyncResponse_SyncAck SyncResponse::UNKNOWN_ERROR;
const SyncResponse_SyncAck SyncResponse::SyncAck_MIN;
const SyncResponse_SyncAck SyncResponse::SyncAck_MAX;
const int SyncResponse::SyncAck_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SyncResponse::kSyncAckFieldNumber;
#endif  // !_MSC_VER

SyncResponse::SyncResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncResponse::InitAsDefaultInstance() {
}

SyncResponse::SyncResponse(const SyncResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncResponse::SharedCtor() {
  _cached_size_ = 0;
  syncack_ = 200;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncResponse::~SyncResponse() {
  SharedDtor();
}

void SyncResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncResponse_descriptor_;
}

const SyncResponse& SyncResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sync_5fprotocol_2eproto();
  return *default_instance_;
}

SyncResponse* SyncResponse::default_instance_ = NULL;

SyncResponse* SyncResponse::New() const {
  return new SyncResponse;
}

void SyncResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    syncack_ = 200;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.adonai.wallet.sync.SyncResponse.SyncAck syncAck = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::adonai::wallet::sync::SyncResponse_SyncAck_IsValid(value)) {
            set_syncack(static_cast< ::com::adonai::wallet::sync::SyncResponse_SyncAck >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.adonai.wallet.sync.SyncResponse.SyncAck syncAck = 1;
  if (has_syncack()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->syncack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.adonai.wallet.sync.SyncResponse.SyncAck syncAck = 1;
  if (has_syncack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->syncack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.adonai.wallet.sync.SyncResponse.SyncAck syncAck = 1;
    if (has_syncack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->syncack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncResponse::MergeFrom(const SyncResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_syncack()) {
      set_syncack(from.syncack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncResponse::CopyFrom(const SyncResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncResponse::Swap(SyncResponse* other) {
  if (other != this) {
    std::swap(syncack_, other->syncack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncResponse_descriptor_;
  metadata.reflection = SyncResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountRequest::kKnownIDFieldNumber;
#endif  // !_MSC_VER

AccountRequest::AccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountRequest::InitAsDefaultInstance() {
}

AccountRequest::AccountRequest(const AccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountRequest::~AccountRequest() {
  SharedDtor();
}

void AccountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountRequest_descriptor_;
}

const AccountRequest& AccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sync_5fprotocol_2eproto();
  return *default_instance_;
}

AccountRequest* AccountRequest::default_instance_ = NULL;

AccountRequest* AccountRequest::New() const {
  return new AccountRequest;
}

void AccountRequest::Clear() {
  knownid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 knownID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_knownID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_knownid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_knownid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_knownID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 knownID = 1;
  for (int i = 0; i < this->knownid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->knownid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 knownID = 1;
  for (int i = 0; i < this->knownid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->knownid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountRequest::ByteSize() const {
  int total_size = 0;

  // repeated int64 knownID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->knownid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->knownid(i));
    }
    total_size += 1 * this->knownid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountRequest::MergeFrom(const AccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  knownid_.MergeFrom(from.knownid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountRequest::CopyFrom(const AccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountRequest::IsInitialized() const {

  return true;
}

void AccountRequest::Swap(AccountRequest* other) {
  if (other != this) {
    knownid_.Swap(&other->knownid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountRequest_descriptor_;
  metadata.reflection = AccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountResponse::kDeletedIDFieldNumber;
const int AccountResponse::kAccountFieldNumber;
#endif  // !_MSC_VER

AccountResponse::AccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountResponse::InitAsDefaultInstance() {
}

AccountResponse::AccountResponse(const AccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountResponse::~AccountResponse() {
  SharedDtor();
}

void AccountResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountResponse_descriptor_;
}

const AccountResponse& AccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sync_5fprotocol_2eproto();
  return *default_instance_;
}

AccountResponse* AccountResponse::default_instance_ = NULL;

AccountResponse* AccountResponse::New() const {
  return new AccountResponse;
}

void AccountResponse::Clear() {
  deletedid_.Clear();
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 deletedID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletedID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_deletedid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_deletedid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_deletedID;
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // repeated .com.adonai.wallet.sync.Account account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 deletedID = 1;
  for (int i = 0; i < this->deletedid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->deletedid(i), output);
  }

  // repeated .com.adonai.wallet.sync.Account account = 2;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 deletedID = 1;
  for (int i = 0; i < this->deletedid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->deletedid(i), target);
  }

  // repeated .com.adonai.wallet.sync.Account account = 2;
  for (int i = 0; i < this->account_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->account(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountResponse::ByteSize() const {
  int total_size = 0;

  // repeated int64 deletedID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletedid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->deletedid(i));
    }
    total_size += 1 * this->deletedid_size() + data_size;
  }

  // repeated .com.adonai.wallet.sync.Account account = 2;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->account(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountResponse::MergeFrom(const AccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  deletedid_.MergeFrom(from.deletedid_);
  account_.MergeFrom(from.account_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountResponse::CopyFrom(const AccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountResponse::IsInitialized() const {

  for (int i = 0; i < account_size(); i++) {
    if (!this->account(i).IsInitialized()) return false;
  }
  return true;
}

void AccountResponse::Swap(AccountResponse* other) {
  if (other != this) {
    deletedid_.Swap(&other->deletedid_);
    account_.Swap(&other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountResponse_descriptor_;
  metadata.reflection = AccountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountAck::kDeletedGuidFieldNumber;
const int AccountAck::kWrittenGuidFieldNumber;
#endif  // !_MSC_VER

AccountAck::AccountAck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountAck::InitAsDefaultInstance() {
}

AccountAck::AccountAck(const AccountAck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountAck::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountAck::~AccountAck() {
  SharedDtor();
}

void AccountAck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountAck_descriptor_;
}

const AccountAck& AccountAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sync_5fprotocol_2eproto();
  return *default_instance_;
}

AccountAck* AccountAck::default_instance_ = NULL;

AccountAck* AccountAck::New() const {
  return new AccountAck;
}

void AccountAck::Clear() {
  deletedguid_.Clear();
  writtenguid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 deletedGuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deletedGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_deletedguid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_deletedguid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_deletedGuid;
        if (input->ExpectTag(16)) goto parse_writtenGuid;
        break;
      }

      // repeated int64 writtenGuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_writtenGuid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_writtenguid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_writtenguid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_writtenGuid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 deletedGuid = 1;
  for (int i = 0; i < this->deletedguid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->deletedguid(i), output);
  }

  // repeated int64 writtenGuid = 2;
  for (int i = 0; i < this->writtenguid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->writtenguid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 deletedGuid = 1;
  for (int i = 0; i < this->deletedguid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->deletedguid(i), target);
  }

  // repeated int64 writtenGuid = 2;
  for (int i = 0; i < this->writtenguid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->writtenguid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountAck::ByteSize() const {
  int total_size = 0;

  // repeated int64 deletedGuid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletedguid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->deletedguid(i));
    }
    total_size += 1 * this->deletedguid_size() + data_size;
  }

  // repeated int64 writtenGuid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->writtenguid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->writtenguid(i));
    }
    total_size += 1 * this->writtenguid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountAck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountAck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountAck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountAck::MergeFrom(const AccountAck& from) {
  GOOGLE_CHECK_NE(&from, this);
  deletedguid_.MergeFrom(from.deletedguid_);
  writtenguid_.MergeFrom(from.writtenguid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountAck::CopyFrom(const AccountAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountAck::IsInitialized() const {

  return true;
}

void AccountAck::Swap(AccountAck* other) {
  if (other != this) {
    deletedguid_.Swap(&other->deletedguid_);
    writtenguid_.Swap(&other->writtenguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountAck_descriptor_;
  metadata.reflection = AccountAck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account::kIDFieldNumber;
const int Account::kNameFieldNumber;
const int Account::kDescriptionFieldNumber;
const int Account::kCurrencyFieldNumber;
const int Account::kAmountFieldNumber;
const int Account::kColorFieldNumber;
#endif  // !_MSC_VER

Account::Account()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account::InitAsDefaultInstance() {
}

Account::Account(const Account& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account::~Account() {
  SharedDtor();
}

void Account::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (this != default_instance_) {
  }
}

void Account::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_descriptor_;
}

const Account& Account::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sync_5fprotocol_2eproto();
  return *default_instance_;
}

Account* Account::default_instance_ = NULL;

Account* Account::New() const {
  return new Account;
}

void Account::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_currency()) {
      if (currency_ != &::google::protobuf::internal::kEmptyString) {
        currency_->clear();
      }
    }
    if (has_amount()) {
      if (amount_ != &::google::protobuf::internal::kEmptyString) {
        amount_->clear();
      }
    }
    color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_currency;
        break;
      }

      // required string currency = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_currency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->currency().data(), this->currency().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_amount;
        break;
      }

      // required string amount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_amount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->amount().data(), this->amount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // optional uint32 color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }

  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->currency(), output);
  }

  // required string amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->amount(), output);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // required string currency = 4;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->currency().data(), this->currency().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->currency(), target);
  }

  // required string amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->amount().data(), this->amount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->amount(), target);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string currency = 4;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency());
    }

    // required string amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->amount());
    }

    // optional uint32 color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void Account::Swap(Account* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(currency_, other->currency_);
    std::swap(amount_, other->amount_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_descriptor_;
  metadata.reflection = Account_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync
}  // namespace wallet
}  // namespace adonai
}  // namespace com

// @@protoc_insertion_point(global_scope)
