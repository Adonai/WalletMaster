// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sync_protocol.proto

#ifndef PROTOBUF_sync_5fprotocol_2eproto__INCLUDED
#define PROTOBUF_sync_5fprotocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace adonai {
namespace wallet {
namespace sync {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sync_5fprotocol_2eproto();
void protobuf_AssignDesc_sync_5fprotocol_2eproto();
void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

class SyncRequest;
class SyncResponse;
class AccountRequest;
class AccountResponse;
class AccountAck;
class Account;

enum SyncRequest_SyncType {
  SyncRequest_SyncType_REGISTER = 0,
  SyncRequest_SyncType_MERGE = 1
};
bool SyncRequest_SyncType_IsValid(int value);
const SyncRequest_SyncType SyncRequest_SyncType_SyncType_MIN = SyncRequest_SyncType_REGISTER;
const SyncRequest_SyncType SyncRequest_SyncType_SyncType_MAX = SyncRequest_SyncType_MERGE;
const int SyncRequest_SyncType_SyncType_ARRAYSIZE = SyncRequest_SyncType_SyncType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncRequest_SyncType_descriptor();
inline const ::std::string& SyncRequest_SyncType_Name(SyncRequest_SyncType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncRequest_SyncType_descriptor(), value);
}
inline bool SyncRequest_SyncType_Parse(
    const ::std::string& name, SyncRequest_SyncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncRequest_SyncType>(
    SyncRequest_SyncType_descriptor(), name, value);
}
enum SyncResponse_SyncAck {
  SyncResponse_SyncAck_OK = 200,
  SyncResponse_SyncAck_ACCOUNT_EXISTS = 402,
  SyncResponse_SyncAck_AUTH_WRONG = 403,
  SyncResponse_SyncAck_UNKNOWN_ERROR = 999
};
bool SyncResponse_SyncAck_IsValid(int value);
const SyncResponse_SyncAck SyncResponse_SyncAck_SyncAck_MIN = SyncResponse_SyncAck_OK;
const SyncResponse_SyncAck SyncResponse_SyncAck_SyncAck_MAX = SyncResponse_SyncAck_UNKNOWN_ERROR;
const int SyncResponse_SyncAck_SyncAck_ARRAYSIZE = SyncResponse_SyncAck_SyncAck_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncResponse_SyncAck_descriptor();
inline const ::std::string& SyncResponse_SyncAck_Name(SyncResponse_SyncAck value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncResponse_SyncAck_descriptor(), value);
}
inline bool SyncResponse_SyncAck_Parse(
    const ::std::string& name, SyncResponse_SyncAck* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncResponse_SyncAck>(
    SyncResponse_SyncAck_descriptor(), name, value);
}
// ===================================================================

class SyncRequest : public ::google::protobuf::Message {
 public:
  SyncRequest();
  virtual ~SyncRequest();

  SyncRequest(const SyncRequest& from);

  inline SyncRequest& operator=(const SyncRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncRequest& default_instance();

  void Swap(SyncRequest* other);

  // implements Message ----------------------------------------------

  SyncRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncRequest& from);
  void MergeFrom(const SyncRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SyncRequest_SyncType SyncType;
  static const SyncType REGISTER = SyncRequest_SyncType_REGISTER;
  static const SyncType MERGE = SyncRequest_SyncType_MERGE;
  static inline bool SyncType_IsValid(int value) {
    return SyncRequest_SyncType_IsValid(value);
  }
  static const SyncType SyncType_MIN =
    SyncRequest_SyncType_SyncType_MIN;
  static const SyncType SyncType_MAX =
    SyncRequest_SyncType_SyncType_MAX;
  static const int SyncType_ARRAYSIZE =
    SyncRequest_SyncType_SyncType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SyncType_descriptor() {
    return SyncRequest_SyncType_descriptor();
  }
  static inline const ::std::string& SyncType_Name(SyncType value) {
    return SyncRequest_SyncType_Name(value);
  }
  static inline bool SyncType_Parse(const ::std::string& name,
      SyncType* value) {
    return SyncRequest_SyncType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string account = 1;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 1;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional .com.adonai.wallet.sync.SyncRequest.SyncType syncType = 3 [default = MERGE];
  inline bool has_synctype() const;
  inline void clear_synctype();
  static const int kSyncTypeFieldNumber = 3;
  inline ::com::adonai::wallet::sync::SyncRequest_SyncType synctype() const;
  inline void set_synctype(::com::adonai::wallet::sync::SyncRequest_SyncType value);

  // @@protoc_insertion_point(class_scope:com.adonai.wallet.sync.SyncRequest)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_synctype();
  inline void clear_has_synctype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::std::string* password_;
  int synctype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_sync_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_sync_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static SyncRequest* default_instance_;
};
// -------------------------------------------------------------------

class SyncResponse : public ::google::protobuf::Message {
 public:
  SyncResponse();
  virtual ~SyncResponse();

  SyncResponse(const SyncResponse& from);

  inline SyncResponse& operator=(const SyncResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncResponse& default_instance();

  void Swap(SyncResponse* other);

  // implements Message ----------------------------------------------

  SyncResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncResponse& from);
  void MergeFrom(const SyncResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SyncResponse_SyncAck SyncAck;
  static const SyncAck OK = SyncResponse_SyncAck_OK;
  static const SyncAck ACCOUNT_EXISTS = SyncResponse_SyncAck_ACCOUNT_EXISTS;
  static const SyncAck AUTH_WRONG = SyncResponse_SyncAck_AUTH_WRONG;
  static const SyncAck UNKNOWN_ERROR = SyncResponse_SyncAck_UNKNOWN_ERROR;
  static inline bool SyncAck_IsValid(int value) {
    return SyncResponse_SyncAck_IsValid(value);
  }
  static const SyncAck SyncAck_MIN =
    SyncResponse_SyncAck_SyncAck_MIN;
  static const SyncAck SyncAck_MAX =
    SyncResponse_SyncAck_SyncAck_MAX;
  static const int SyncAck_ARRAYSIZE =
    SyncResponse_SyncAck_SyncAck_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SyncAck_descriptor() {
    return SyncResponse_SyncAck_descriptor();
  }
  static inline const ::std::string& SyncAck_Name(SyncAck value) {
    return SyncResponse_SyncAck_Name(value);
  }
  static inline bool SyncAck_Parse(const ::std::string& name,
      SyncAck* value) {
    return SyncResponse_SyncAck_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .com.adonai.wallet.sync.SyncResponse.SyncAck syncAck = 1;
  inline bool has_syncack() const;
  inline void clear_syncack();
  static const int kSyncAckFieldNumber = 1;
  inline ::com::adonai::wallet::sync::SyncResponse_SyncAck syncack() const;
  inline void set_syncack(::com::adonai::wallet::sync::SyncResponse_SyncAck value);

  // @@protoc_insertion_point(class_scope:com.adonai.wallet.sync.SyncResponse)
 private:
  inline void set_has_syncack();
  inline void clear_has_syncack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int syncack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_sync_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_sync_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static SyncResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccountRequest : public ::google::protobuf::Message {
 public:
  AccountRequest();
  virtual ~AccountRequest();

  AccountRequest(const AccountRequest& from);

  inline AccountRequest& operator=(const AccountRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountRequest& default_instance();

  void Swap(AccountRequest* other);

  // implements Message ----------------------------------------------

  AccountRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountRequest& from);
  void MergeFrom(const AccountRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 knownID = 1;
  inline int knownid_size() const;
  inline void clear_knownid();
  static const int kKnownIDFieldNumber = 1;
  inline ::google::protobuf::int64 knownid(int index) const;
  inline void set_knownid(int index, ::google::protobuf::int64 value);
  inline void add_knownid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      knownid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_knownid();

  // @@protoc_insertion_point(class_scope:com.adonai.wallet.sync.AccountRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > knownid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_sync_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_sync_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AccountRequest* default_instance_;
};
// -------------------------------------------------------------------

class AccountResponse : public ::google::protobuf::Message {
 public:
  AccountResponse();
  virtual ~AccountResponse();

  AccountResponse(const AccountResponse& from);

  inline AccountResponse& operator=(const AccountResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountResponse& default_instance();

  void Swap(AccountResponse* other);

  // implements Message ----------------------------------------------

  AccountResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountResponse& from);
  void MergeFrom(const AccountResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 deletedID = 1;
  inline int deletedid_size() const;
  inline void clear_deletedid();
  static const int kDeletedIDFieldNumber = 1;
  inline ::google::protobuf::int64 deletedid(int index) const;
  inline void set_deletedid(int index, ::google::protobuf::int64 value);
  inline void add_deletedid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      deletedid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_deletedid();

  // repeated .com.adonai.wallet.sync.Account account = 2;
  inline int account_size() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::com::adonai::wallet::sync::Account& account(int index) const;
  inline ::com::adonai::wallet::sync::Account* mutable_account(int index);
  inline ::com::adonai::wallet::sync::Account* add_account();
  inline const ::google::protobuf::RepeatedPtrField< ::com::adonai::wallet::sync::Account >&
      account() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::adonai::wallet::sync::Account >*
      mutable_account();

  // @@protoc_insertion_point(class_scope:com.adonai.wallet.sync.AccountResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > deletedid_;
  ::google::protobuf::RepeatedPtrField< ::com::adonai::wallet::sync::Account > account_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sync_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_sync_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AccountResponse* default_instance_;
};
// -------------------------------------------------------------------

class AccountAck : public ::google::protobuf::Message {
 public:
  AccountAck();
  virtual ~AccountAck();

  AccountAck(const AccountAck& from);

  inline AccountAck& operator=(const AccountAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountAck& default_instance();

  void Swap(AccountAck* other);

  // implements Message ----------------------------------------------

  AccountAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountAck& from);
  void MergeFrom(const AccountAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 deletedGuid = 1;
  inline int deletedguid_size() const;
  inline void clear_deletedguid();
  static const int kDeletedGuidFieldNumber = 1;
  inline ::google::protobuf::int64 deletedguid(int index) const;
  inline void set_deletedguid(int index, ::google::protobuf::int64 value);
  inline void add_deletedguid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      deletedguid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_deletedguid();

  // repeated int64 writtenGuid = 2;
  inline int writtenguid_size() const;
  inline void clear_writtenguid();
  static const int kWrittenGuidFieldNumber = 2;
  inline ::google::protobuf::int64 writtenguid(int index) const;
  inline void set_writtenguid(int index, ::google::protobuf::int64 value);
  inline void add_writtenguid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      writtenguid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_writtenguid();

  // @@protoc_insertion_point(class_scope:com.adonai.wallet.sync.AccountAck)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > deletedguid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > writtenguid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sync_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_sync_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static AccountAck* default_instance_;
};
// -------------------------------------------------------------------

class Account : public ::google::protobuf::Message {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Account& default_instance();

  void Swap(Account* other);

  // implements Message ----------------------------------------------

  Account* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required string currency = 4;
  inline bool has_currency() const;
  inline void clear_currency();
  static const int kCurrencyFieldNumber = 4;
  inline const ::std::string& currency() const;
  inline void set_currency(const ::std::string& value);
  inline void set_currency(const char* value);
  inline void set_currency(const char* value, size_t size);
  inline ::std::string* mutable_currency();
  inline ::std::string* release_currency();
  inline void set_allocated_currency(::std::string* currency);

  // required string amount = 5;
  inline bool has_amount() const;
  inline void clear_amount();
  static const int kAmountFieldNumber = 5;
  inline const ::std::string& amount() const;
  inline void set_amount(const ::std::string& value);
  inline void set_amount(const char* value);
  inline void set_amount(const char* value, size_t size);
  inline ::std::string* mutable_amount();
  inline ::std::string* release_amount();
  inline void set_allocated_amount(::std::string* amount);

  // optional int32 color = 6;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 6;
  inline ::google::protobuf::int32 color() const;
  inline void set_color(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.adonai.wallet.sync.Account)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_currency();
  inline void clear_has_currency();
  inline void set_has_amount();
  inline void clear_has_amount();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* currency_;
  ::std::string* amount_;
  ::google::protobuf::int32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_sync_5fprotocol_2eproto();
  friend void protobuf_AssignDesc_sync_5fprotocol_2eproto();
  friend void protobuf_ShutdownFile_sync_5fprotocol_2eproto();

  void InitAsDefaultInstance();
  static Account* default_instance_;
};
// ===================================================================


// ===================================================================

// SyncRequest

// required string account = 1;
inline bool SyncRequest::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncRequest::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncRequest::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& SyncRequest::account() const {
  return *account_;
}
inline void SyncRequest::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SyncRequest::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void SyncRequest::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncRequest::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* SyncRequest::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncRequest::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool SyncRequest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncRequest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncRequest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SyncRequest::password() const {
  return *password_;
}
inline void SyncRequest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SyncRequest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SyncRequest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SyncRequest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SyncRequest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SyncRequest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .com.adonai.wallet.sync.SyncRequest.SyncType syncType = 3 [default = MERGE];
inline bool SyncRequest::has_synctype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncRequest::set_has_synctype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncRequest::clear_has_synctype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncRequest::clear_synctype() {
  synctype_ = 1;
  clear_has_synctype();
}
inline ::com::adonai::wallet::sync::SyncRequest_SyncType SyncRequest::synctype() const {
  return static_cast< ::com::adonai::wallet::sync::SyncRequest_SyncType >(synctype_);
}
inline void SyncRequest::set_synctype(::com::adonai::wallet::sync::SyncRequest_SyncType value) {
  assert(::com::adonai::wallet::sync::SyncRequest_SyncType_IsValid(value));
  set_has_synctype();
  synctype_ = value;
}

// -------------------------------------------------------------------

// SyncResponse

// required .com.adonai.wallet.sync.SyncResponse.SyncAck syncAck = 1;
inline bool SyncResponse::has_syncack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncResponse::set_has_syncack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncResponse::clear_has_syncack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncResponse::clear_syncack() {
  syncack_ = 200;
  clear_has_syncack();
}
inline ::com::adonai::wallet::sync::SyncResponse_SyncAck SyncResponse::syncack() const {
  return static_cast< ::com::adonai::wallet::sync::SyncResponse_SyncAck >(syncack_);
}
inline void SyncResponse::set_syncack(::com::adonai::wallet::sync::SyncResponse_SyncAck value) {
  assert(::com::adonai::wallet::sync::SyncResponse_SyncAck_IsValid(value));
  set_has_syncack();
  syncack_ = value;
}

// -------------------------------------------------------------------

// AccountRequest

// repeated int64 knownID = 1;
inline int AccountRequest::knownid_size() const {
  return knownid_.size();
}
inline void AccountRequest::clear_knownid() {
  knownid_.Clear();
}
inline ::google::protobuf::int64 AccountRequest::knownid(int index) const {
  return knownid_.Get(index);
}
inline void AccountRequest::set_knownid(int index, ::google::protobuf::int64 value) {
  knownid_.Set(index, value);
}
inline void AccountRequest::add_knownid(::google::protobuf::int64 value) {
  knownid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AccountRequest::knownid() const {
  return knownid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AccountRequest::mutable_knownid() {
  return &knownid_;
}

// -------------------------------------------------------------------

// AccountResponse

// repeated int64 deletedID = 1;
inline int AccountResponse::deletedid_size() const {
  return deletedid_.size();
}
inline void AccountResponse::clear_deletedid() {
  deletedid_.Clear();
}
inline ::google::protobuf::int64 AccountResponse::deletedid(int index) const {
  return deletedid_.Get(index);
}
inline void AccountResponse::set_deletedid(int index, ::google::protobuf::int64 value) {
  deletedid_.Set(index, value);
}
inline void AccountResponse::add_deletedid(::google::protobuf::int64 value) {
  deletedid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AccountResponse::deletedid() const {
  return deletedid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AccountResponse::mutable_deletedid() {
  return &deletedid_;
}

// repeated .com.adonai.wallet.sync.Account account = 2;
inline int AccountResponse::account_size() const {
  return account_.size();
}
inline void AccountResponse::clear_account() {
  account_.Clear();
}
inline const ::com::adonai::wallet::sync::Account& AccountResponse::account(int index) const {
  return account_.Get(index);
}
inline ::com::adonai::wallet::sync::Account* AccountResponse::mutable_account(int index) {
  return account_.Mutable(index);
}
inline ::com::adonai::wallet::sync::Account* AccountResponse::add_account() {
  return account_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::adonai::wallet::sync::Account >&
AccountResponse::account() const {
  return account_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::adonai::wallet::sync::Account >*
AccountResponse::mutable_account() {
  return &account_;
}

// -------------------------------------------------------------------

// AccountAck

// repeated int64 deletedGuid = 1;
inline int AccountAck::deletedguid_size() const {
  return deletedguid_.size();
}
inline void AccountAck::clear_deletedguid() {
  deletedguid_.Clear();
}
inline ::google::protobuf::int64 AccountAck::deletedguid(int index) const {
  return deletedguid_.Get(index);
}
inline void AccountAck::set_deletedguid(int index, ::google::protobuf::int64 value) {
  deletedguid_.Set(index, value);
}
inline void AccountAck::add_deletedguid(::google::protobuf::int64 value) {
  deletedguid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AccountAck::deletedguid() const {
  return deletedguid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AccountAck::mutable_deletedguid() {
  return &deletedguid_;
}

// repeated int64 writtenGuid = 2;
inline int AccountAck::writtenguid_size() const {
  return writtenguid_.size();
}
inline void AccountAck::clear_writtenguid() {
  writtenguid_.Clear();
}
inline ::google::protobuf::int64 AccountAck::writtenguid(int index) const {
  return writtenguid_.Get(index);
}
inline void AccountAck::set_writtenguid(int index, ::google::protobuf::int64 value) {
  writtenguid_.Set(index, value);
}
inline void AccountAck::add_writtenguid(::google::protobuf::int64 value) {
  writtenguid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
AccountAck::writtenguid() const {
  return writtenguid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
AccountAck::mutable_writtenguid() {
  return &writtenguid_;
}

// -------------------------------------------------------------------

// Account

// required uint64 ID = 1;
inline bool Account::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Account::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Account::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Account::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Account::id() const {
  return id_;
}
inline void Account::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool Account::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Account::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Account::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Account::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Account::name() const {
  return *name_;
}
inline void Account::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Account::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Account::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Account::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Account::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string description = 3;
inline bool Account::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Account::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Account::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Account::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Account::description() const {
  return *description_;
}
inline void Account::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Account::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Account::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Account::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Account::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string currency = 4;
inline bool Account::has_currency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Account::set_has_currency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Account::clear_has_currency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Account::clear_currency() {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    currency_->clear();
  }
  clear_has_currency();
}
inline const ::std::string& Account::currency() const {
  return *currency_;
}
inline void Account::set_currency(const ::std::string& value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void Account::set_currency(const char* value) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(value);
}
inline void Account::set_currency(const char* value, size_t size) {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  currency_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_currency() {
  set_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    currency_ = new ::std::string;
  }
  return currency_;
}
inline ::std::string* Account::release_currency() {
  clear_has_currency();
  if (currency_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = currency_;
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Account::set_allocated_currency(::std::string* currency) {
  if (currency_ != &::google::protobuf::internal::kEmptyString) {
    delete currency_;
  }
  if (currency) {
    set_has_currency();
    currency_ = currency;
  } else {
    clear_has_currency();
    currency_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string amount = 5;
inline bool Account::has_amount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Account::set_has_amount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Account::clear_has_amount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Account::clear_amount() {
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    amount_->clear();
  }
  clear_has_amount();
}
inline const ::std::string& Account::amount() const {
  return *amount_;
}
inline void Account::set_amount(const ::std::string& value) {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  amount_->assign(value);
}
inline void Account::set_amount(const char* value) {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  amount_->assign(value);
}
inline void Account::set_amount(const char* value, size_t size) {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  amount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Account::mutable_amount() {
  set_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    amount_ = new ::std::string;
  }
  return amount_;
}
inline ::std::string* Account::release_amount() {
  clear_has_amount();
  if (amount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = amount_;
    amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Account::set_allocated_amount(::std::string* amount) {
  if (amount_ != &::google::protobuf::internal::kEmptyString) {
    delete amount_;
  }
  if (amount) {
    set_has_amount();
    amount_ = amount;
  } else {
    clear_has_amount();
    amount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 color = 6;
inline bool Account::has_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Account::set_has_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Account::clear_has_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Account::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::google::protobuf::int32 Account::color() const {
  return color_;
}
inline void Account::set_color(::google::protobuf::int32 value) {
  set_has_color();
  color_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace sync
}  // namespace wallet
}  // namespace adonai
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::adonai::wallet::sync::SyncRequest_SyncType>() {
  return ::com::adonai::wallet::sync::SyncRequest_SyncType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::adonai::wallet::sync::SyncResponse_SyncAck>() {
  return ::com::adonai::wallet::sync::SyncResponse_SyncAck_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sync_5fprotocol_2eproto__INCLUDED
