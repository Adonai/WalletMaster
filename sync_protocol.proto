package com.adonai.wallet.sync;

message SyncRequest {
    required string account = 1;
    required string password = 2;
    
    enum SyncType {
        REGISTER = 0; // server will listen to register request, to auth request otherwise
        MERGE = 1;
    }
    
    required SyncType syncType = 3;
}

message SyncResponse {
    enum SyncAck {
        OK = 200;
        ACCOUNT_EXISTS = 402;
        AUTH_WRONG = 403;
        ALREADY_SYNCING = 409;
        UNKNOWN_ERROR = 999;
    }
    
    required SyncAck syncAck = 1;
}

message EntityRequest {
    required uint64 lastKnownServerTimestamp = 1; // known to client last server revision
}

message EntityResponse {
    repeated Entity modified = 1; // entities modified on server/client
    repeated Entity added = 2; // entities added on client
}

message EntityAck {
    required uint64 newServerTimestamp = 1;
}

message Entity {
    required string ID = 1;
    required uint64 lastModified = 2;
    required bool deleted = 3;

    optional Account account = 4;
    optional Operation operation = 5;
    optional Category category = 6;
    optional Budget budget = 7;
}

message Account { // root, independent
    required string name = 2;
    required string currency = 3;
    required string amount = 4; // BigDecimal for Java
    optional string description = 5;
    optional int32 color = 6;
}

message Operation { // depends on accounts and categories
    required uint64 time = 2;
    required string categoryId = 3;
    required string amount = 4;
    optional string description = 5;
    optional string ordererId = 6;
    optional string beneficiarId = 7;
    optional double convertingRate = 8;
}

message Category { // depends on accounts
    required string name = 2;
    required uint32 type = 3;
    optional string preferredAccount = 4;
}

message Budget { // depends on accounts
    required string name = 2;
    required uint64 from = 3; // start time
    required string till = 4; // end time
    optional string coveredAccountId = 5; // if no account is specified, count all
    repeated BudgetItem content = 6; // array of items
}

message BudgetItem { // depends on budgets and categories
    required string parentBudgetId = 2;

    required string categoryId = 3;
    required uint64 maxAmount = 4; // ... to spend
}